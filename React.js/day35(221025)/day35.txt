프론트엔드 35일차 목차입니다. 

1. 클래스형 vs 함수형 컴포넌트
2. React Hooks

재치는 남을 적으로 만들지 않으면서 자신의 주장을 펼치는 기술이다.
----------------------------------------------------------------------

클래스형 컴포넌트 vs 함수형 컴포넌트

함수형에서도 클래스형에서 처럼 constructor()등 함수나
state를 사용하고 싶어서 Hook이 나옴

클래스형 컴포넌트		전통적인 방식
	리액트에서 컴포넌트를 작성할 때 Component 상속 받아 작성하는 방법
	즉, 클래스 형식으로 컴포넌트를 작성하는 방법

함수형 컴포넌트 		버전 16.8 부터 Hook 지원
	자바스크립트 특성인 함수형 개발 방법을 이용하는
	컨포넌트를 함수형으로 작성하는 방법

클래스형 컴포넌트 특징
	class 키워드로 시작
	Component를 상속 받는다.
	render() 함수를 사용해서 JSX를 반환
	props를 조회할 때 this 키워드를 사용

함수형 컴포넌트 특징
	jsx를 return 문을 사용해서 반환
	state를 사용할 수 없다.
	생명주기 함수를 작성할 수 없다.

클래스형 컴포넌트 작성법
	export default class Day03A1 extends React.Component {
		render() {
			return (
				<div>
					<div>Hello</div>
					<div>World</div>
				</div>
			)
		}
	}

함수형 컴포넌트 작성법
	export default function Day03A1() {
		return (
				<div>
					<div>Hello</div>
					<div>World</div>
				</div>
			)
		}
	}

리액트 훅(Hooks)
	리액트가 함수 컴포넌트를 만들며 어떤 값을 유지할 수 있도록 "캐시"를 만들었다.
	이 캐시를 이용하여 상태관리를 할 수 있도록 만든 여러개의 API를 훅(Hooks)라 한다.

	즉, 초창기 함수 컴포넌트에서 상태 관리를 할 수 없었던 것을
	리액트 훅을 이용해 클래스 컴포넌트에서의 상태관리가 가능하게 되었다.

리액트 훅 종류
	useState
	useEffect - Component가 렌더링 되고 화면에 프린트 된 후에 발생
	useMemo
	useCallback
	useLayoutEffect - Component가 렌더링 되고 화면에 프린트 되기 전에 발생
	useContext
	useReducer
	useRef

useState
	Component에서 사용되는 state와 동일한 기능으로
	Hooks에서 state를 관리하기 위한 기술이다.

기본 사용법
	const [count, setCount] = useState(1);
	const [읽기용 값, 쓰기용 함수] = useState(초기값);

useEffect
	렌더링 이후에 필요한 경우 사용하며 렌더링 후 발생할 코드를 만들 수 있다.

사용 방법	
	useEffect(콜백함수, 의존성배열)

	useEffect(() => {
		if(count > 10) setCount(0)
	}, [count])		// count가 변경되면 위에 있는 함수를 실행
				// 아무것도 안쓰면 모든 값들이 변경 될 때 위에 있는 함수를 실행

	useEffect(() => {
		실행할 코드
	},[감시할 대상])

	배열이 생략된다면 리렌더링 때마다 실행
	[]가 비어있으면 렌더링 후 무조건 실행, 그 이후에는 실행되지 않는다.
	[감시대상] 가 있을 경우 해당 변수 값이 변경될 때마다 함수 호출(리렌더링)

	useEffect 안에 return 이 있으면 compoenetWillUnmount와 같이 행동된다.
	컴포넌트가 unmonut 되거나 업데이트 되어서 리렌더링 될 때마다 호출된다.

	claenup 함수 반환
	- 언마운트 될 때만 cleanup 함수를 하고 싶으면 배열을 빈값으로 선언
	특정값이 업데이트 되기 직전 호출 하고 싶으면 배열에 특정 값을 넣으면 된다.

useMemo
	컴포넌트의 성능을 최적화 시킬 수 있는 대표적인 Hooks 기술 중 하나
	
	Memo는 Momoization을 뜻하는 말로 기존에 수행한 연산의 결과 값을 어딘가에
	저장해주고 동일한 입력이 들어오면 재활용하는 프로그래밍 기법을 뜻한다.

사용 방법
	useMemo(콜백함수, 의존성배열)

	const value = useMemo(() => {
		return calculate();
	}. [item])

useCallback & React.memo
	useMemo는 특정 결과값을 재사용할 때 사용하는 반면
	useCallback은 특정 함수를 새로 만들지 않고 재사용하고 싶을 때 사용

React.memo
	리액트에서는 변경된 바로 그 컴포넌트 DOM에 업데이트를 하게 해주는 memo 기능
	특정 부분을 기억하고 변경이 발생했을 때 이전 렌더와 변경된 렌더를 비교한다.
	만약 같다면 DOM을 업데이트 하지 않고 만약 다르다면 DOM을 업데이트한다.

사용 방법
	useCallback(콜백함수, 의존성배열)

	const value = useCallback(() => {
		return calculate();
	}, [item])

useRef
	useState()나 useEffect() 처럼 많이 쓰이지는 않지만 어떠한 특정 DOM을 직접 선택하여
	포커스를 주거나 특정 엘리먼트의 크기나 생상을 변경하는 경우 사용한다.

	단, React 개념 또는 특징 상 특별한 경우를 제외하고는 DOM을 직접 접근하여 사용하는 것은
	올바른 사용법이 아니라고 말하고 있다.




















